name: Build Worker

on:
  # we want pull requests so we can build(test) but not push to image registry
  push:
    branches:
      - 'main'
    # only build when important files change
    paths:
      - 'worker/**'
      - '.github/workflows/call-docker-build-worker.yaml'
      - '.github/workflows/reusable-docker-build.yaml'
  pull_request:
    branches:
      - 'main'
    # only build when important files change
    paths:
      - 'worker/**'
      - '.github/workflows/call-docker-build-worker.yaml'
      - '.github/workflows/reusable-docker-build.yaml'
  schedule:
    # re-run monthly to keep image fresh with upstream base images
    - cron: '0 0 1 * *'

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

jobs:
  call-docker-build:
    permissions:
      packages: write
      pull-requests: write
    uses: ./.github/workflows/reusable-docker-build.yaml
    secrets:
      dockerhub-username: ${{ secrets.DOCKER_USERNAME }}
      dockerhub-password: ${{ secrets.DOCKER_PASSWORD }}
    with:
      context: worker
      image-names: |
        ghcr.io/${{ github.repository }}-worker
        hryshchenkoihor/example-voting-app-worker

  cve-scan:
    needs: call-docker-build
    runs-on: ubuntu-latest
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.15.0
        with:
          image-ref: ${{ needs.call-docker-build.outputs.ghcr-tag }}
          exit-code: '1'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          ignore-unfixed: true

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  unit-test:
    needs: call-docker-build
    runs-on: ubuntu-latest
    container: ${{ needs.call-docker-build.outputs.ghcr-tag }}
    steps:
      - name: Run unit test
        run: |
          cd /app
          (dotnet Worker.dll &)
          sleep 10
          ls -la
